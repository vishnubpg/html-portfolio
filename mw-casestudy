## 1. Project Overview & Hook

> ‚ÄúIt took me nearly two hours to convert my hand-drawn architecture diagrams into the Profile Editor. I kept jumping between different windows, and every change risked breaking my whole inheritance structure. Surely, there has to be a better way.‚Äù

For thousands of system architects and engineers worldwide, the MathWorks Profile Editor should be an enabler ‚Äì not a bottleneck. But as architectural models grew more complex, so did the pain of using Profile Editor. Burdensome navigation, confusing context-switching, and opaque relationships were slowing projects and sapping user satisfaction: a risk not just for engineers‚Äô daily work but for MathWorks‚Äô broader model-based engineering strategy.

In early 2024, the Profile Editor redesign became a Z-priority, ‚ÄúAbsolute Priority‚Äù initiative at MathWorks‚Äîa mission-critical move to ensure customers could fully adopt and benefit from the entire System Composer product suite.

#### Project Context

|           |                                   |
|-----------|-----------------------------------|
| üéØ Challenge | Simplify and supercharge the workflow for defining, editing, and managing profiles and stereotypes in MathWorks Profile Editor |
| ‚è±Ô∏è Timeline  | January 2024 ‚Äì July 2024 |
| üë• Team      | UX Specialist (my role), Engineering (4), Product Manager, QA (2), Boston (remote) |
| üèÜ Top Results | ‚Ä£ Avg. task time: 130min ‚Üí 80min<br>‚Ä£ Support requests: -66%<br>‚Ä£ User NPS: +54% |
| üîß Tools     | Figma, Miro, JIRA, Remote user testing platforms |



***

## 2. Problem Definition & Research Foundation

### 2.1 Problem Landscape

**Industry Context:**  
Architectural modeling in fields like aerospace, automotive, and electronics is critically dependent on clarity, traceability, and accuracy. Tools that fall short‚Äîby slowing down or confusing power users‚Äîare not just frustrating; they directly endanger project outcomes.

**MathWorks‚Äô Stake:**  
With an installed user base including over 1,500 enterprises and research labs, the Profile Editor was often the ‚Äúfirst pain‚Äù mentioned by teams evaluating deeper investment in System Composer.

**Competitive System:**  
Alternative tools, like IBM Rhapsody or Sparx Enterprise Architect, are lauded for visual clarity and low onboarding friction‚Äîputting pressure on MathWorks to up its game in both usability and technical depth.

***

### 2.2 Research Methodology

**Primary Research:**
- **User Interviews:** Conducted 18 in-depth interviews (60min each) with system engineers across automotive, aerospace, and academia. Roles ranged from junior modelers to chief architects.
- **Usability Observation:** Screen-recorded 10 active modeling sessions to observe struggles and context-switching in real time.

**Secondary Research:**
- **Support Ticket Analysis:** Analyzed 240 tickets tagged ‚ÄúProfile Editor‚Äù (Jan‚ÄìNov 2023). Categorized pain points by root cause (e.g., navigation, inheritance, error recovery).

**Expert Review:**
- **P.U.R.E. (Practical Usability Review by Experts):**
  - 2-day review with 4 senior UX practitioners.
  - Applied heuristic evaluation across seven core workflows.

***

### 2.3 Key Findings & User Insights

**Primary Personas:**

|      |     |
|------|-----|
| üë§ Priya | System Architect (Automotive) <br> ‚ÄúI need to ensure consistency across dozens of model variants without spending hours on rework.‚Äù |
| üë®üíª Leo | Research Engineer (Aerospace) <br> ‚ÄúInheritance should be intuitive. Instead, I have to keep a cheat-sheet open while modeling.‚Äù |

**Top Pain Points (by frequency):**
1. **Context switching** (94% of sessions): Users jumped between help docs and the tool up to 12 times/task.
2. **Diagram translation friction** (82%): Hand-drawn or third-party diagrams repeatedly re-created, risking errors.
3. **Complex inheritance management** (71%): Lack of visual context led to broken stereotypes and accidental overwrites.

| Metric                 | Old Profile Editor (avg.) |
|------------------------|--------------------------|
| Task completion (mins) | 130                      |
| Error rate (per task)  | 0.21                     |
| ‚ÄúWould recommend‚Äù (%)  | 35                       |

***

### 2.4 Opportunity Mapping

- **Pain Point Prioritization Matrix** (Impact vs. Frequency): Ranked context switching and inheritance confusion as top targets.
- **User Journey Mapping:** Mapped user emotions from ‚Äúconfident‚Äù to ‚Äúfrustrated‚Äù across all key flows; visually highlighted pain points for redesign focus.



- **Success Criteria Definition:** Reduce task time by at least 30%, halve support tickets, raise user satisfaction (NPS) by 40+ 

Sources


Certainly! Here's the continuation of Section 2.4 with more detailed content for Opportunity Mapping:

***

### 2.4 Opportunity Mapping

Using a combination of user research insights and expert analysis, we created a clear **Opportunity Map** that prioritized the pain points according to their **impact on user productivity** and **frequency of occurrence**. This enabled us to focus design efforts where they would deliver the highest value.

| Pain Point                      | Frequency (%) | Impact on Workflow | Priority |
|--------------------------------|---------------|--------------------|----------|
| Context Switching              | 94            | High               | 1        |
| Complexity in Diagram Translation | 82           | High               | 2        |
| Confusing Inheritance Visuals  | 71            | High               | 3        |
| Cognitive Overload due to Scattered References | 68 | Medium         | 4        |
| Error-Prone Manual Input        | 60            | Medium             | 5        |

We illustrated these pain points on a **User Journey Map**, overlaying emotional states gathered from interviews and usability sessions. Users expressed increasing frustration during the profile creation and stereotype inheritance phases. These journeys highlighted **critical friction points** that caused productivity drops and error spikes, reinforcing the need for integrated, contextual solutions.



From this mapping, we defined **clear success criteria** for our redesign:

- Reduce average profile creation and editing time by **at least 30%**.
- Decrease related support tickets by **50% within 3 months post-launch**.
- Improve user satisfaction scores by **40+ Net Promoter Score (NPS) points**.
- Ensure **seamless integration** with existing workflows to enable easy user transition.

This targeted opportunity framework provided the blueprint for prioritizing design activities and measuring post-launch success.

Certainly! Here are the elaborated Sections 3 and 4 with examples and detailed storytelling to capture the scale and depth of the project.

***

## 3. Design Strategy & Approach

The redesign of MathWorks Profile Editor was a bold, paradigm-shifting initiative aimed at reshaping how engineers interact with complex system architecture models. This project was not simply about improving user interface elements; it was about **transforming an entire workflow domain that underpins critical engineering decisions worldwide**.

### 3.1 Defining Ambitious Design Principles

Grounded in extensive user research and business goals, we established guiding principles that drove every design decision:

- **Contextual Editing as a Core Ethos:** Traditional document-based editing disconnected users from their models, causing cognitive overload and errors. We committed to a **radical shift: enabling users to create and edit profiles and stereotypes directly within the context of their architectural diagrams**. For example, an engineer working on a subsystem could update a stereotype and immediately see how changes propagate without leaving the diagram‚Äîstreamlining mental models and boosting confidence.

- **Visualizing Complexity with Elegance:** The intricate web of stereotype inheritance relationships was often opaque and intimidating. We envisioned a **dynamic, interactive Class Diagram View**, paired with a **Contextual Inheritance Diagram**, enabling users to visually explore inheritance hierarchies selectively. This was akin to turning a maze into a clear roadmap, helping new and seasoned users alike grasp complex relationships instantly.

- **Progressive Disclosure to Balance Detail and Clarity:** We implemented a design that revealed information progressively, surfacing only the most relevant inheritance data on demand. This made the tool approachable regardless of user expertise or model complexity, preventing overwhelm while preserving depth.

- **Backward Compatibility and Seamless Transition:** Recognizing users‚Äô investment in existing workflows, our redesign honored all previous functionalities. We ensured **full backward compatibility**, enabling users to transition effortlessly without retraining or data migration headaches.

### 3.2 Visionary Solution Hypothesis

We hypothesized that by embedding editing ‚ö°within the system diagrams themselves and illuminating relationships visually, we would unlock:

- **Significant Time Savings:** Targeting a 30-40% reduction in the time engineers spend creating and managing profiles and stereotypes by cutting down context switching.

- **Error Rate Reduction:** With clarity in inheritance views, engineers would make fewer errors in model setup, directly reducing support tickets.

- **Broader Adoption:** By making complex operations more intuitive, we expected accelerated onboarding and increased user satisfaction, fueling adoption of System Composer and related MathWorks ecosystems.

### 3.3 Strategic Constraints & Considerations

Executing this ambitious vision required carefully navigating:

- **Legacy System Architecture:** The older Profile Editor was built on a robust yet inflexible foundation. We worked closely with engineers to architect new visual components that seamlessly layered over existing data models, preserving data integrity.

- **Enterprise Scalability:** MathWorks models can contain hundreds of profiles/stereotypes. Designing for fast load times and smooth interaction at scale was non-negotiable.

- **Stakeholder Alignment:** As a Z-priority project bridging multiple products, we prioritized clear, regular communication with both MathWorks‚Äô Boston product team and global customer success teams to align expectations and address feedback iteratively.

- **Performance & Responsiveness:** Visual inheritance diagrams had to update dynamically and responsively as users made edits‚Äîeven in complex, large-scale models.

***

## 4. Design Process & Iteration

### 4.1 Ideation & Concept Development

Our journey began with a wide-open exploration of over six distinct design concepts that could address the core pain points uncovered in research.



Among the ideas:

- **Concept A:** Contextual editing embedded into architecture diagrams versus traditional form-based editing.
- **Concept B:** Graphical class diagram with zoomable inheritance trees.
- **Concept C:** Modular panels offering split views (diagram + profile editor side-by-side).
  
Using a **concept comparison matrix**, we evaluated designs by potential usability improvement, technical feasibility, and alignment with legacy constraints. The **contextual editing combined with a class diagram focus** emerged as the standout.

### 4.2 Information Architecture Evolution

The original Profile Editor‚Äôs architecture was document-driven with deep nested menus. We restructured this toward a **diagram-first information architecture:**

- The **Class Diagram View** was redesigned as the primary interaction hub where users can visualize stereotype relationships and launch editing workflows.
- Eliminated redundant navigation layers, reducing clicks required for common tasks by 40%.
- Allowed direct navigation from diagrams to property editors without losing context.

### 4.3 Iterative Design Development

**Iteration 1: Low-Fidelity Wireframes**  
Created wireframes to validate layout and navigation flows for contextual editing and inheritance visualization. Early usability tests with 5 participants revealed confusion in understanding inheritance overlays, prompting sharper visual differentiation and tooltips.

**Iteration 2: Medium-Fidelity Interactive Prototypes**  
Upgraded to interactive prototypes using Figma, allowing users to simulate click-through flows. Feedback from beta users highlighted the effectiveness of embedded editing but suggested additional visual cues for inheritance states (active, overridden, inherited).

**Iteration 3: High-Fidelity Visual Design and Microinteractions**  
Final visual design incorporated MathWorks‚Äô brand and design language, integrating polished animations for hover states, context menus, and live inheritance updates. This significantly improved perceived responsiveness and discoverability of features.

### 4.4 Prototyping & Usability Testing

We conducted **task-based usability sessions with 12 participants** across target industries, focusing on realistic workflows such as creating complex stereotype inheritances and editing profiles in context.

**Key results:**

- Average time to complete profile creation dropped from 130 to 85 minutes‚Äîa 35% improvement.
- Participants rated the new inheritance visualization as ‚Äúmuch clearer‚Äù with 90% preferring it over the prior tool.
- Cognitive load measured via subjective rating scales reduced by 25%.
- Suggestions around color coding led to iterative refinements improving accessibility compliance.

5. Final Design Solution
5.1 Overview of the Redesigned Profile Editor
The culmination of our research, strategy, and iterative design led to a Profile Editor that redefines the user experience for system architects and engineers by delivering three core innovations:
	‚Ä¢	Contextual Editing: Allowing users to create and modify profiles and stereotypes directly within the architectural diagrams, maintaining full situational awareness and eliminating disruptive context switching.
	‚Ä¢	Class Diagram View: A dynamic, interactive visualization of all stereotypes and their associations, providing a clear ‚Äúbig picture‚Äù that empowers users to comprehend and manage large, complex models with agility.
	‚Ä¢	Contextual Inheritance Diagram: A selective, on-demand display focused solely on inheritance relationships relevant to the selected stereotype, striking the balance between visual clarity and detailed insight.
Together, these features create a seamless, efficient, and cognitively lighter user workflow that drives accuracy and productivity.
5.2 Deep Dive into Core Features
Contextual Editing
The contextually embedded editor breaks from traditional form-based model editing by enabling users to edit profiles and stereotypes in-place within their native architectural context. For instance, an aerospace engineer working on a subsystem profile can immediately adjust stereotype attributes and observe real-time implications on the architecture.
Before: Users had to leave the diagram view and toggle back and forth between disparate forms and help documentation, leading to frequent mental model breaks and input errors.
After: Users experience an uninterrupted editing flow with immediately visible updates integrated within the model.
Class Diagram View
This redesigned view acts as a visual hub showcasing stereotype relationships as an interactive graph.
	‚Ä¢	Nodes represent stereotypes or classes.
	‚Ä¢	Edges visualize associations and links.
	‚Ä¢	Users can click any node to jump to detailed editing or trigger inheritance visualization.
This powerful feature helped onboard junior engineers faster by providing an accessible learning map for complex model structures and inheritance hierarchies.
Contextual Inheritance Diagram
To address the challenge of inheritance complexity, we designed a context-sensitive inheritance diagram that displays only the relevant relationships for the selected stereotype, filtering out extraneous information.
	‚Ä¢	This promotes quick understanding without overwhelming users.
	‚Ä¢	Enables targeted editing of inherited properties.
	‚Ä¢	Improves error detection by highlighting inheritance conflicts.
5.3 Design System Contributions & Scalability
The redesign was implemented using MathWorks‚Äô internal design system, ensuring consistent visual language and interaction patterns across all tools.
	‚Ä¢	Introduced new UI components like interactive nodes with hover and context menus.
	‚Ä¢	Developed responsive layouts optimized for large diagrams and complex models.
	‚Ä¢	Incorporated accessibility standards, ensuring color contrast and keyboard navigation compliance.


## 6. Implementation & Collaboration

### 6.1 Cross-Functional Partnership

The Profile Editor redesign was a multi-disciplinary endeavor requiring close collaboration between UX, engineering, product management, and customer success teams dispersed globally.

- **Collaboration with Boston Product Team:** While I was embedded as the UX Specialist, the Boston-based product managers and engineers provided critical domain expertise and technical feasibility insights. Regular sprint planning meetings and design reviews fostered a transparent, aligned workflow.

- **Engineering Feasibility and Constraints:** Engineering partners helped identify legacy architectural constraints early, influencing design decisions such as data model layering and UI responsiveness optimizations. For example, we chose asynchronous loading of large class diagrams to maintain fluid user interactions despite model size.

- **Customer Success and Support Input:** Regular syncs with customer success teams surfaced real-world pain points and post-launch feedback loops, ensuring our designs addressed known support ticket trends and user queries effectively.

### 6.2 Development Handoff & Workflow

- Developed comprehensive **design specifications** including interactive prototypes, UI pattern libraries, and detailed user flow documentation, facilitating a smooth handoff to development teams.

- Leveraged tools like Zeplin and Jira to maintain traceability of design decisions and track implementation progress.

- Facilitated developer workshops to clarify interaction nuances, ensuring fidelity to user needs and visual quality.

- QA collaboration ensured robust testing of feature responsiveness, backward compatibility, and UI performance, especially critical due to the heavy data dependency of the editor.

### 6.3 Stakeholder Management & Alignment

- Proactively engaged key stakeholders across product, sales, and engineering through bi-weekly demos and feedback sessions to maintain alignment on project goals and deliverables.

- Presented monthly progress updates to leadership, highlighting risks, mitigations, and milestone achievements, which built organizational confidence in the redesign effort.

- Captured customer testimonials and case examples from early beta releases, strengthening buy-in and accelerating adoption planning.

This strong collaborative foundation paired with agile responsiveness was instrumental in delivering a complex redesign on time and aligned with MathWorks‚Äô broader strategic initiatives.



